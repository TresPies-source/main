// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Analyzes gratitude entries to identify recurring themes and patterns.
 *
 * - analyzeGratitudePatterns - A function that analyzes gratitude entries and provides insights.
 * - AnalyzeGratitudePatternsInput - The input type for the analyzeGratitudePatterns function.
 * - AnalyzeGratitudePatternsOutput - The return type for the analyzeGratitudePatterns function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AnalyzeGratitudePatternsInputSchema = z.object({
  gratitudeEntries: z.array(z.string()).describe('An array of gratitude entries.'),
});
export type AnalyzeGratitudePatternsInput = z.infer<
  typeof AnalyzeGratitudePatternsInputSchema
>;

const AnalyzeGratitudePatternsOutputSchema = z.object({
  recurringThemes: z
    .array(z.string())
    .describe('A list of recurring themes in the gratitude entries.'),
  overallSentiment: z
    .string()
    .describe('An overall sentiment analysis of the gratitude entries.'),
});
export type AnalyzeGratitudePatternsOutput = z.infer<
  typeof AnalyzeGratitudePatternsOutputSchema
>;

export async function analyzeGratitudePatterns(
  input: AnalyzeGratitudePatternsInput
): Promise<AnalyzeGratitudePatternsOutput> {
  return analyzeGratitudePatternsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'analyzeGratitudePatternsPrompt',
  input: {schema: AnalyzeGratitudePatternsInputSchema},
  output: {schema: AnalyzeGratitudePatternsOutputSchema},
  prompt: `You are an AI assistant specializing in gratitude analysis. Analyze the following gratitude entries to identify recurring themes and provide an overall sentiment analysis.

Gratitude Entries:
{{#each gratitudeEntries}}- {{{this}}}
{{/each}}

Provide the recurring themes and overall sentiment in a structured format.
Recurring Themes:
- ...
Overall Sentiment: ...`,
});

const analyzeGratitudePatternsFlow = ai.defineFlow(
  {
    name: 'analyzeGratitudePatternsFlow',
    inputSchema: AnalyzeGratitudePatternsInputSchema,
    outputSchema: AnalyzeGratitudePatternsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
